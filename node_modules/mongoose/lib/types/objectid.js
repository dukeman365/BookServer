/**
 * ObjectId type constructor
 *
 * ####Example
 *
 *     var id = new mongoose.Types.ObjectId;
 *
 * @constructor ObjectId
 */

<<<<<<< HEAD
'use strict';

const ObjectId = require('../driver').get().ObjectId;

/*!
 * Getter for convenience with populate, see gh-6115
 */

Object.defineProperty(ObjectId.prototype, '_id', {
  enumerable: false,
  configurable: true,
  get: function() {
    return this;
  }
});

module.exports = ObjectId;
=======
var ObjectId = require(driver + '/objectid');
module.exports = ObjectId;

/**
 * Creates an ObjectId from `str`
 *
 * @param {ObjectId|HexString} str
 * @static fromString
 * @receiver ObjectId
 * @return {ObjectId}
 * @api private
 */

ObjectId.fromString;

/**
 * Converts `oid` to a string.
 *
 * @param {ObjectId} oid ObjectId instance
 * @static toString
 * @receiver ObjectId
 * @return {String}
 * @api private
 */

ObjectId.toString;
>>>>>>> parent of bf65d55... Trying to figure out mongoose
