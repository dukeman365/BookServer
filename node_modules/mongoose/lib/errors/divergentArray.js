
/*!
 * Module dependencies.
 */

<<<<<<< HEAD:node_modules/mongoose/lib/error/divergentArray.js
'use strict';

const MongooseError = require('./');
=======
var MongooseError = require('../error');
>>>>>>> parent of bf65d55... Trying to figure out mongoose:node_modules/mongoose/lib/errors/divergentArray.js

/*!
 * DivergentArrayError constructor.
 *
 * @inherits MongooseError
 */

function DivergentArrayError(paths) {
  const msg = 'For your own good, using `document.save()` to update an array '
          + 'which was selected using an $elemMatch projection OR '
          + 'populated using skip, limit, query conditions, or exclusion of '
          + 'the _id field when the operation results in a $pop or $set of '
          + 'the entire array is not supported. The following '
          + 'path(s) would have been modified unsafely:\n'
          + '  ' + paths.join('\n  ') + '\n'
          + 'Use Model.update() to update these arrays instead.';
  // TODO write up a docs page (FAQ) and link to it

  MongooseError.call(this, msg);
<<<<<<< HEAD:node_modules/mongoose/lib/error/divergentArray.js
=======
  Error.captureStackTrace(this, arguments.callee);
>>>>>>> parent of bf65d55... Trying to figure out mongoose:node_modules/mongoose/lib/errors/divergentArray.js
  this.name = 'DivergentArrayError';
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this);
  } else {
    this.stack = new Error().stack;
  }
}

/*!
 * Inherits from MongooseError.
 */

DivergentArrayError.prototype.__proto__ = MongooseError.prototype;

/*!
 * exports
 */

module.exports = DivergentArrayError;
